class Pair{
    int x;
    int y;
    Pair(int x, int y)
    {
        this.x=x;
        this.y=y;
    }
}


//bfs approach
class Solution {
    public int[][] floodFill(int[][] grid, int sr, int sc, int newColor) {
        //corner case
        if(grid[sr][sc]==newColor)
        {
            return grid;
        }
        
        int m= grid.length;
        int n = grid[0].length;
        int color = grid[sr][sc];
        
        Queue<Pair> queue= new LinkedList<>();
        queue.add(new Pair(sr,sc));
        
        while(queue.size()>0)
        {
            Pair currentPair=queue.remove();
            int currentRow= currentPair.x;
            int currentCol= currentPair.y;
            if(currentRow <0 || currentRow>=m || currentCol<0 || currentCol>= n|| grid[currentRow][currentCol]!=color)
        {
            continue;
        }
            grid[currentRow][currentCol]=newColor;
            queue.add(new Pair(currentRow-1,currentCol));
            queue.add(new Pair(currentRow,currentCol+1));
            queue.add(new Pair(currentRow+1,currentCol));
            queue.add(new Pair(currentRow,currentCol-1));
            
        }
     return grid;


    }
}
