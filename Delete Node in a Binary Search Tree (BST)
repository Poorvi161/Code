class Solution { 
	/* This is the Node class definition
	
	class Node {
		public Node left;
		public Node right;
		public int data;

		public Node(int data) {
			this.data = data;
		}
	}
	*/

	Node removeFromBst(Node root, int key) {
	    // add your logic here 
		
		if(root == null)
		{
			return null;
		}
		// if the first root is equal to key then we will do this
		if(root.data == key)
		{
			return helper(root);
		}
		// saving the first root as dummy cause it will be lost in iteration
		Node dummy = root; //7 here 
		while(root != null)
		
		{
			if(root.data > key)
			{
				if(root.left !=null && root.left.data == key)
				{
					root.left= helper(root.left);
					break;
				}
				else
				{
					root= root.left;
				}
			}
			else
			{
				if(root.right !=null && root.right.data==key)
				{
					root.right = helper(root.right);
					break;
				}
				else
				{
					root = root.right;
				}
			}
		}
		return dummy;
	}
	
	
	
	public Node helper(Node root)
	{
		if(root.left==null)
		{
			return root.right;
		}
		else if(root.right== null)
		{
			return root.left;
		}
		else
		{
			Node rightChild= root.right;
			Node lastRight= findlastRight(root.left);
			lastRight.right=rightChild;
			return root.left;
			
		}
		
	}
	
	public Node findlastRight(Node root)
	{
		if(root.right== null)
		{
			return root;
		}
		return findlastRight(root.right);
	}
}
