class Solution {
    public boolean canArrange(int[] arr, int k) {
        // key is rem and value is count
        HashMap<Integer,Integer> memo= new HashMap<>(); 
        
        //populating the entire hashmap with rem as key and their count as value 
        for(int i=0; i < arr.length;i++)
        {
            int currentVal=arr[i];
            int currentRem = ((currentVal % k) + k) % k ;
             //chekcing if my current rem is already present in my hashmap
                int count =memo.containsKey(currentRem) ? memo.get(currentRem) : 0;
                memo.put(currentRem , count+1);
                
        }
        
        //iterate the hahsmap
        // key here is i of for 
        for(int key : memo.keySet())
            {
                if(key == 0)
                {
                    //occurance of remainder is even then only else straight away return false
                    if(memo.get(key) % 2 !=0)
                    {
                        return false;
                    }
                }
            else if(memo.containsKey(k-key) == false)
            {
                return false;
                
            }
            //frequenciea are equal or not
            else if(memo.get(k-key).equals(memo.get(key))== false)
            {
                return false;
            }
            }
        return true;
        
    }
}
