/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
         HashMap<Integer,Integer> inorderMap = populateMap(inorder);
        int[] postIndex ={postorder.length-1};
        return constructTree(postorder,inorderMap,0,inorder.length-1,postIndex);
    }
    private TreeNode constructTree(int[] postorder, HashMap<Integer,Integer> inorderMap, int start, int end, int[] postIndex)
    {
        if(start>end)
        {
            return null;
        }
        TreeNode root = new TreeNode(postorder[postIndex[0]]);
        int currentIndex = inorderMap.get(postorder[postIndex[0]]);
        postIndex[0] -=1;
        
        root.right= constructTree(postorder, inorderMap,currentIndex+1,end, postIndex);
        root.left= constructTree(postorder, inorderMap, start, currentIndex-1, postIndex);
        
        
        return root;
    }
    private HashMap<Integer,Integer> populateMap(int[] inorder)
    {
        HashMap<Integer,Integer> memo= new HashMap<>();
        for(int i=0;i<inorder.length;i++)
        {
            memo.put(inorder[i],i);
        }
      return memo;
    }
     
}
