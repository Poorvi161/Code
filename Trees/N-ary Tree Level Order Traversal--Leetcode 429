/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> answer = new ArrayList<>();
        Queue<Node> queue = new LinkedList<>();
        
        if(root==null)
        {
            return answer;
        }
        queue.add(root);
        while(!queue.isEmpty())
        {
            int currentSize = queue.size();
            List<Integer> level= new ArrayList<>();
            while(currentSize>0)
            {
                Node currentNode = queue.remove();
                level.add(currentNode.val);
                currentSize-=1;
            
                for(Node child : currentNode.children)
                {
                    queue.add(child);
                }
                
                
            }
             answer.add(level);
        }
        return answer;
    }
}
